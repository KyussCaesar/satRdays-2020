high level:

- what _is_ production?
  what's stopping you from just running it on your machine?
  why does anything need to change?
- ans: so you can call something "finished"
  don't need to babysit it, can get on improving things
  less reliance on a single machine with your office's internet
- what makes this difficult for R compared with other languages?
  other languages:
    - e.g C: already standardised tools for building, people have
      been doing it forever
    - e.g JS: `npm` handles a lot of the complexity for you
    - e.g Rust/Go: statically-linked binary, lockfiles
  R:
    - doesn't really have any standardised approach
    - "package managers" and "version control" still seem to be
      relatively new things to the R community

---

Good morning everyone!

My name is Antony and I'm a Data Engineer at Quantiful.

Now, my primary responsibility at Quantiful is "productionising"
data science output, which, for us, means getting R code running in
production.

Yes, really, we run R code in production.

Now a lot of people generally have this reaction upon hearing that:

<why, why would you do that!?>

Well for us, we want to get better models in front of clients _as fast
as possible_, so it's no good if you develop a better model, only to
have it do _nothing_ for some time while you're busy "productionising"
it.

All of our data science work is done in R, and the fastest route to
production is just to modify that existing code rather than re-write
everything.

So if our code is already in R, then obviously the fastest route to
production is to use that code...

<right?>

<well yes, but actually no>

There's a lot more than just the code to consider; there's also the
operating system, system packages, R version, and R packages used

<too many limes>

so how can we control all of these variables?

where we landed was Git for code, Docker for the operating system,
system packages, and R version, and a library called packrat for
controlling R package versions

I'm here today give a high-level overview of how we run R code in
production like absolute madlads.

But first, we gotta take a minute to talk about "production"
what does that mean exactly?
what's the difference between "production" versus just running it
on your machine?

deployment to production represents developers letting go of their code

% bad way to phrase; trying to say like "it needs to be able to run
% without intervention"

the big part about runnign 

one of the biggest challenges about running code without close supervision

...but we already _have_ an environment where the code works;
your machine!

so one way to ease the transition is to replicate the environment as
closely as you can

this means you need:

- the same OS
- the same system packages installed
- the same R version
- the same R package versions

and, of course, the _code_.

our solutions for these are

- docker
- docker
- docker
- packrat
- git
